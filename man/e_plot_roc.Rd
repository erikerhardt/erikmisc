% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/e_plot_roc.R
\name{e_plot_roc}
\alias{e_plot_roc}
\title{A function to calculate the ROC curve, determine the optimal threshold, plot the curve, and provide classification statistics}
\usage{
e_plot_roc(
  actual_labels = NULL,
  pred_values = NULL,
  sw_plot = TRUE,
  cm_mode = c("sens_spec", "prec_recall", "everything")[1]
)
}
\arguments{
\item{actual_labels}{true labels of binary observations, should be the same (and not a proxy) as what was used to build the prediction model}

\item{pred_values}{either predicted labels or a value (such as a probability) associated with the success label}

\item{sw_plot}{T/F to return a ROC curve ggplot object}

\item{cm_mode}{\code{mode} from \code{caret::confusionMatrix}}
}
\value{
\preformatted{           a list including
}

\itemize{
\item roc_curve_best   - one-row tibble of classification statistics for best Sensitivity and Specificity (closest to upper-left corner of ROC curve)
\item pred_positive    - pred_values, returned as numeric 1 or 0
\item confusion_matrix - confusion matrix statistics
\item p_roc            - ROC curve ggplot object
\item roc_curve        - ROC curve data
}
}
\description{
A function to calculate the ROC curve, determine the optimal threshold, plot the curve, and provide classification statistics
}
\examples{
## Categorical prediction-value example (from ?caret::confusionMatrix)
ex_lvs    <- c("normal", "abnormal")
ex_truth  <- factor(rep(ex_lvs, times = c(86, 258)), levels = rev(ex_lvs))
ex_pred   <- factor(c(rep(ex_lvs, times = c(54,  32))
                    , rep(ex_lvs, times = c(27, 231)))
                  , levels = rev(ex_lvs))
out <-
  e_plot_roc(
    actual_labels = ex_truth
  , pred_values   = ex_pred
  , sw_plot       = TRUE
  )
out$roc_curve_best \%>\% print(width = Inf)
out$confusion_matrix


## Numeric prediction-value example
out <-
  e_plot_roc(
    actual_labels = sample(c("a", "b"), size = 50, replace = TRUE)
  , pred_values   = runif(n = 50)
  , sw_plot       = TRUE
  )
out$roc_curve_best \%>\% print(width = Inf)
out$p_roc
out$confusion_matrix


## Logistic regression
data(dat_mtcars_e)

dat_mtcars_e <-
  dat_mtcars_e \%>\%
  dplyr::mutate(
    vs_V = ifelse(vs == "V-shaped", 1, 0) # 0-1 binary for logistic regression
  )

# Predict engine type `vs` ("V-shaped" vs "straight") from other features.
fit_glm_vs <-
  glm(
    cbind(vs_V, 1 - vs_V) ~ disp + wt + carb
  , family = binomial
  , data = dat_mtcars_e
  )
cat("Test residual deviance for lack-of-fit (if > 0.10, little-to-no lack-of-fit)\n")
dev_p_val <- 1 - pchisq(fit_glm_vs$deviance, fit_glm_vs$df.residual)
dev_p_val \%>\% print()
car::Anova(fit_glm_vs, type = 3)
#summary(fit_glm_vs)

glm_roc <-
  e_plot_roc(
    actual_labels = dat_mtcars_e$vs_V
  , pred_values   = fit_glm_vs$fitted.values
  , sw_plot       = TRUE
  , cm_mode       = c("sens_spec", "prec_recall", "everything")[3]
  )
glm_roc$roc_curve_best \%>\% print(width = Inf)
glm_roc$p_roc
glm_roc$confusion_matrix

}
