% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/e_derivative_finite_difference.R
\name{e_derivative_finite_difference}
\alias{e_derivative_finite_difference}
\title{Derivatives of time series using finite difference coefficients}
\usage{
e_derivative_finite_difference(x, sw_derivative = 1)
}
\arguments{
\item{x}{numeric vector}

\item{sw_derivative}{order of the derivative, 1 = slope, up to 6}
}
\value{
dx           derivative
}
\description{
To approximate a derivative to an arbitrary order of accuracy, it is
possible to use the finite difference. A finite difference can be central,
forward or backward. \url{https://en.wikipedia.org/wiki/Finite_difference_coefficient}
Applies highest possible accuracy given the location in the vector;
end points have lower accuracy and use the 1-width forward/backward method.
}
\examples{
dat <-
  tibble::tibble(
    x  = datasets::lh |> as.numeric()
  , dx = e_derivative_finite_difference(x)
  , i  = 1:length(x)
  )
dat |> print(n = 10)
# reshape to plot
dat_long <-
  dat |>
  tidyr::pivot_longer(
    cols = c(x, dx)
  ) |>
  dplyr::mutate(
    name = name |> factor(levels = c("x", "dx"))
  )
library(ggplot2)
p <- ggplot(dat_long, aes(x = i, y = value))
p <- p + theme_bw()
p <- p + geom_hline(aes(yintercept = 0), colour = "black"
                   , linetype = "solid", linewidth = 0.2, alpha = 0.3)
p <- p + geom_line()
p <- p + facet_grid(name ~ ., scales = "free_y", drop = TRUE)
p <- p + scale_x_continuous(breaks = seq(0, max(dat$i), by = 2))
print(p)
}
